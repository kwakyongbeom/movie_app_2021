{"version":3,"sources":["Movies.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","style","backgroundColor","map","index","prototype","PropTypes","number","isRequired","string","arrayOf","App","state","count","isLoading","movies","add","setState","current","getMovies","a","axios","get","data","console","log","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"6SAIA,SAASA,EAAT,GAAqD,EAArCC,GAAsC,IAAnCC,EAAkC,EAAlCA,KAAKC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,QAAQC,EAAe,EAAfA,OAAOC,EAAQ,EAARA,OACzC,OAAQ,sBAAKC,UAAU,QAAf,UACA,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACzC,sBAAKI,UAAU,cAAf,UACA,oBAAIA,UAAU,eAAeG,MAAO,CAACC,gBAAiB,OAAtD,SAA+DR,IAC/D,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,SAAd,SACKD,EAAOM,KAAI,SAACN,EAAOO,GAAR,OACR,cAD0B,CAC1B,MAAgBN,UAAU,gBAA1B,UAA2CM,EAA3C,IAAmDP,IAA1CO,QAGjB,mBAAGN,UAAU,iBAAb,SAA+BH,UAKvCJ,EAAMc,UAAU,CACZb,GAAGc,IAAUC,OAAOC,WACpBd,MAAMY,IAAUG,OAAOD,WACvBb,QAAQW,IAAUG,OAAOD,WACzBZ,OAAOU,IAAUG,OAAOD,WACxBf,KAAKa,IAAUC,OAAOC,WACtBX,OAAOS,IAAUI,QAAQJ,IAAUG,QAAQD,YAGhCjB,QCyCAoB,G,kNA7DbC,MAAM,CACJC,MAAM,EACNC,WAAU,EACVC,OAAO,I,EAGTC,IAAK,WACH,EAAKC,UAAS,SAAAC,GAAO,MAAK,CAACL,MAAMK,EAAQL,MAAM,O,EAGjDM,U,sBAAU,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,yEALV,gBAGEP,EAHF,EAENQ,KACEA,KAAMR,OAGVS,QAAQC,IAAIV,GAEZ,EAAKE,SAAS,CAACF,SAAOD,WAAU,IARxB,2C,kEAYRY,KAAKP,c,+BAIP,MAE6BO,KAAKd,MAAzBE,EAFT,EAESA,UAAUC,EAFnB,EAEmBA,OAGlB,OAAQ,yBAASjB,UAAU,YAAnB,SACNgB,EACD,qBAAKhB,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,uBAEF,qBAAKA,UAAU,SAAf,SAEIiB,EAAOZ,KAAI,SAAAwB,GAET,OAAQ,cAAC,EAAD,CAENnC,GAAImC,EAAMnC,GACVC,KAAMkC,EAAMlC,KACZC,MAAOiC,EAAMjC,MACbC,QAASgC,EAAMhC,QACfC,OAAQ+B,EAAMC,mBACd/B,OAAQ8B,EAAM9B,QANT8B,EAAMnC,e,GA3CLqC,IAAMC,YCFxBC,IAASC,OAAO,cAAC,EAAD,IAAQC,SAASC,eAAe,W","file":"static/js/main.e06831ba.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({id,year,title,summary,poster,genres}){\r\n    return (<div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}/>\r\n        <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\" style={{backgroundColor: \"red\"}}>{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">\r\n            {genres.map((genres,index)=>( //genres ->item,index ->index\r\n                <li key={index} className=\"genres__genre\">{index}.{genres}</li>\r\n            ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary}</p>\r\n        </div>\r\n        </div>);\r\n}\r\n\r\nMovie.prototype={\r\n    id:PropTypes.number.isRequired, //아이디\r\n    title:PropTypes.string.isRequired, //제목 \r\n    summary:PropTypes.string.isRequired,// 정리\r\n    poster:PropTypes.string.isRequired, //이미지\r\n    year:PropTypes.number.isRequired, //년도  \r\n    genres:PropTypes.arrayOf(PropTypes.string).isRequired //장르 string 배열 \r\n};\r\n\r\nexport default Movie;","import React from \"react\";//component를 만들기 위해선 항상 react를 import 해야함\nimport PropTypes from \"prop-types\";  //prop-types import \nimport axios from \"axios\"; //axios import (data-fetch를 위해)\nimport Movie from \"./Movies\" //Movie component \nimport \"./App.css\";\n\n\nclass App extends React.Component{ //필수적인 상속 \n  \n  state={ //component의 데이터를 넣을 공간,\n    count:0,\n    isLoading:true,\n    movies:[]\n  };\n\n  add =() =>{\n    this.setState(current => ({count:current.count+1})); //setState는 state를 변경할 때 적용 여기서 current는 현재 state정보들을 갖고있음 \n  };\n\n  getMovies=async () =>{ //비동기 함수 \n    const {\n      data:{\n        data:{movies} //데이터 형테가  x.data.data.movies 이것을 효과적으로 줄이기위해  {data:{data:{movies}}} ->data안의 data안의 movies잡음(이제부터 movies로 접근) ES6 문법\n      }\n    }=await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"); //해당 uri에 대한 json 데이터가 올 때까지 기다리겠따\n    console.log(movies); //이렇게 movies로 가볍게 접근가능 \n\n    this.setState({movies,isLoading:false}); // state안의 movies에 axios로 받은 movies fetch 원래는 movies(state):movies(axios) 여야 하는데 둘의 이름이 같아 movies만 넣으면 됨 \n  };\n  componentDidMount() //render 완료 후 실행됨  ,data를 fetch 하는 역할 \n  {\n    this.getMovies();\n  }\n\n  render() //실질적으로 화면에 그리는 함수 \n  {\n    //render에서 state 사용시 this.state.변수로 접근 \n    const {isLoading,movies} = this.state;  //{isLoading}:state안의 isLoading 변수에 바로 접근 함 \n    \n    //JSX이기 때문에 html tag의 calss라 하면안되고 ClassName이라 해야함 여기서 class 라하면 위에 정의된 component class로 인식됨\n   return (<section className=\"container\">\n    {isLoading? //isLoading이 true면  \n    <div className=\"loader\"> \n      <span className=\"loader__text\">Loading</span>\n    </div>: //isLoading이 false면 \n    <div className=\"movies\">\n      {\n        movies.map(movie => {\n     \n          return (<Movie // 각 prop 에  값전달\n            key={movie.id} //항상 key prop 정의 해야함 \n            id={movie.id} \n            year={movie.year} \n            title={movie.title} \n            summary={movie.summary} \n            poster={movie.medium_cover_image}\n            genres={movie.genres}\n            />\n            );\n        })\n      }\n    </div>\n    }\n    </section>\n    );\n  }\n  \n  \n}\n\nexport default App;\n","import React from 'react';//component를 만들기 위해선 항상 react를 import 해야함\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />,document.getElementById('root')); //react application 하나의 component만을 rendering 해야하기 때문에, 그 component가 App이다 \n//root라는 id를 갖는 태그안에 데이터들이 들어감 , root는 어디에있냐면 index.html에 있다\n"],"sourceRoot":""}